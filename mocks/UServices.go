// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	users "newsapps/internal/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UServices is an autogenerated mock type for the UServices type
type UServices struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UServices) CreateUser(_a0 users.Users) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(users.Users) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UServices) DeleteUser(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UServices) Login(_a0 string, _a1 string) (users.Users, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (users.Users, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.Users); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadUser provides a mock function with given fields: _a0
func (_m *UServices) ReadUser(_a0 uint) (users.Users, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadUser")
	}

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Users, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Users); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UServices) UpdateUser(_a0 uint, _a1 users.Users) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.Users) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUServices creates a new instance of UServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *UServices {
	mock := &UServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
